name: Build P4EXP with Chinese Language Pack

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 30  # 增加超时时间

    steps:
    # 步骤1：检出代码（启用LFS）
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        lfs: true  # 确保LFS文件被下载
        path: src  # 添加子目录避免路径问题

    # 步骤2：下载P4API.NET依赖
    - name: Download and place dependencies
      run: |
        echo "使用加速镜像下载依赖..."
        # 使用国内镜像源加速下载
        MIRROR_URL="https://mirror.ghproxy.com/https://ftp.perforce.com/perforce/r23.2/bin.ntx64/p4api_vs2015_dyn.zip"
        
        # 创建必要的目录结构
        mkdir -p src/libs
        
        # 下载依赖
        curl -L --retry 3 --retry-delay 10 --connect-timeout 30 -o p4api.zip "$MIRROR_URL" || (
          echo "镜像下载失败，尝试官方源..."
          curl -L --retry 3 --retry-delay 10 --connect-timeout 30 -o p4api.zip "ftp://ftp.perforce.com/perforce/r23.2/bin.ntx64/p4api_vs2015_dyn.zip"
        )

        echo "解压依赖项..."
        unzip -q p4api.zip -d p4api_temp

        echo "复制DLL文件..."
        cp -r p4api_temp/p4api.net/lib/net452/* src/libs/
      shell: bash
      working-directory: .  # 确保在根目录执行

    # 步骤3：设置MSBuild环境
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    # 步骤4：还原NuGet包
    - name: Restore NuGet packages
      run: nuget restore src/P4EXP.sln  # 添加src前缀
      working-directory: .  # 在根目录执行

    # 步骤5：编译项目（修复路径问题）
    - name: Build the P4EXP Project
      run: msbuild "src/P4EXP/P4EXP.csproj" /p:Configuration=Release /p:Platform=x64

    # 步骤6：打包编译结果
    - name: Package the artifacts
      run: |
        mkdir -p artifact
        cp -r src/P4EXP/bin/x64/Release/* artifact/
      shell: bash
    
    # 步骤7：上传打包文件
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: p4exp-zh-CN-build
        path: artifact/

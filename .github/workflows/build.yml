# .github/workflows/build.yml (最终修正版 v3)

name: Build P4EXP with Chinese Language Pack

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    # 步骤1：检出你的代码
    - name: Checkout repository
      uses: actions/checkout@v3

    # 【新增】步骤2：下载并放置 P4API.NET 依赖项
    - name: Download and place dependencies
      run: |
        # 从 Perforce 官方 FTP 下载 P4API.NET (包含 p4bridge.dll)
        Invoke-WebRequest -Uri "https://ftp.perforce.com/perforce/r23.2/bin.ntx64/p4api.net.zip" -OutFile "p4api.net.zip"
        # 解压到临时文件夹
        Expand-Archive -Path "p4api.net.zip" -DestinationPath "p4api_temp"
        # 将需要的 DLL 复制到项目预期的 libs 文件夹中
        Copy-Item -Path "p4api_temp/p4api.net/lib/net452/*" -Destination "libs/" -Recurse -Force
      shell: powershell

    # 步骤3：设置 MSBuild 环境
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    # 步骤4：还原 NuGet 包
    - name: Restore NuGet packages
      run: nuget restore P4EXP.sln

    # 步骤5：编译 P4EXP 单个项目 (而不是整个解决方案)
    - name: Build the P4EXP Project
      run: msbuild P4EXP/P4EXP.csproj /p:Configuration=Release /p:Platform=x64

    # 步骤6：将编译好的文件打包
    - name: Package the artifacts
      run: |
        mkdir artifact
        # 因为我们现在直接编译项目，所以输出路径是相对于项目文件的
        cp -r P4EXP/bin/x64/Release/* artifact/
      shell: bash
    
    # 步骤7：上传打包好的文件
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: p4exp-zh-CN-build
        path: artifact/
